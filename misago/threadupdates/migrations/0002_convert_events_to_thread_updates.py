# Generated by Django 4.2.10 on 2025-06-07 23:17

from django.conf import settings
from django.db import migrations


EVENT_TYPES = {
    "pinned_locally": "pinned_in_category",
    "closed": "locked",
    "entered_thread": "joined",
    "tookover": "took_ownership",
    "removed_owner": "removed_participant",
    "added_participant": "invited_participant",
    "owner_left": "left",
    "participant_left": "left",
}


def convert_events_to_thread_updates(apps, _):
    Post = apps.get_model("misago_threads", "Post")
    ThreadUpdate = apps.get_model("misago_threadupdates", "ThreadUpdate")

    for post in Post.objects.filter(is_event=True).order_by("id"):
        context = None
        context_type = None
        context_id = None

        if parsed_context := get_update_context_data(apps, post.event_context):
            context, context_type, context_id = parsed_context

        update = ThreadUpdate.objects.create(
            category_id=post.category_id,
            thread_id=post.thread_id,
            actor_id=post.poster_id,
            actor_name=post.poster_name,
            hidden_by_id=post.hidden_by_id,
            hidden_by_name=post.hidden_by_name,
            action=EVENT_TYPES.get(post.event_type, post.event_type),
            context=context,
            context_type=context_type,
            context_id=context_id,
            is_hidden=post.is_hidden,
            hidden_at=post.hidden_on,
        )

        ThreadUpdate.objects.filter(id=update.id).update(created_at=post.posted_on)


def get_update_context_data(
    apps, event_context: dict | None
) -> tuple[str, int, str] | None:
    if not event_context:
        return None

    if from_category := event_context.get("from_category"):
        context = from_category["name"]
        context_type = "misago_categories.category"
        context_id = get_context_id_from_url(from_category["url"])
        return context, context_type, context_id

    if user := event_context.get("user"):
        context = user["username"]
        context_type = settings.AUTH_USER_MODEL.lower()
        context_id = user.get("id") or get_context_id_from_url(user["url"])
        return context, context_type, context_id

    if old_title := event_context.get("old_title"):
        context = old_title
        return context, None, None

    if merged_thread := event_context.get("merged_thread"):
        context = merged_thread
        return context, None, None

    return None


def get_context_id_from_url(url: str) -> int:
    return int(url[:-1].split("/")[-1])


class Migration(migrations.Migration):

    atomic = False

    dependencies = [
        ("misago_threadupdates", "0001_threadupdate"),
    ]

    operations = [
        migrations.RunPython(
            convert_events_to_thread_updates,
            migrations.RunPython.noop,
        ),
    ]
