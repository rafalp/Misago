# Generated by Django 4.2.10 on 2025-06-07 23:17

from django.db import migrations


EVENT_TYPES = {
    "tookover": "took_ownership",
    "entered_thread": "joined",
    "added_participant": "invited",
    "owner_left": "left",
    "participant_left": "left",
    "removed_owner": "removed_participant",
    "changed_title": "edited_title",
    "pinned_locally": "pinned_in_category",
}


def convert_events_to_thread_updates(apps, _):
    Post = apps.get_model("misago_threads", "Post")
    ThreadUpdate = apps.get_model("misago_threads", "ThreadUpdate")

    for post in Post.objects.filter(is_event=True).order_by("id"):
        context_type = None
        context_id = None
        context_name = None

        if parsed_context := get_update_context_data(apps, post.event_context):
            context_type, context_id, context_name = parsed_context

        ThreadUpdate.objects.create(
            category_id=post.category_id,
            thread_id=post.thread_id,
            actor_id=post.poster_id,
            actor_name=post.poster_name,
            action=EVENT_TYPES.get(post.event_type, post.event_type),
            context_type=context_type,
            context_id=context_id,
            context_name=context_name,
            created_at=post.posted_on,
            is_hidden=post.is_hidden,
        )


def get_update_context_data(
    apps, event_context: dict | None
) -> tuple[str, int, str] | None:
    if not event_context:
        return None

    if from_category := event_context.get("from_category"):
        context_type = "misago_categories.Category"
        context_id = get_context_id_from_url(from_category["url"])
        context_name = from_category["name"]
        return context_type, context_id, context_name

    if user := event_context.get("user"):
        context_type = "misago_users.User"
        context_id = user.get("id") or get_context_id_from_url(user["url"])
        context_name = user["username"]
        return context_type, context_id, context_name

    if old_title := event_context.get("old_title"):
        context_name = old_title
        return None, None, context_name

    if merged_thread := event_context.get("merged_thread"):
        context_name = merged_thread
        return None, None, context_name

    return None


def get_context_id_from_url(url: str) -> int:
    return int(url[:-1].split("/")[-1])


class Migration(migrations.Migration):

    atomic = False

    dependencies = [
        ("misago_threads", "0019_threadupdate"),
    ]

    operations = [
        migrations.RunPython(
            convert_events_to_thread_updates,
            migrations.RunPython.noop,
        ),
    ]
