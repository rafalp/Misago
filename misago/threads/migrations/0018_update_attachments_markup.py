# Generated by Django 4.2.10 on 2025-01-17 21:58
import re
from functools import partial

from django.conf import settings
from django.db import migrations
from django.db.models import Q
from django.urls import reverse


def update_posts_attachments_markup(apps, _):
    Attachment = apps.get_model("misago_attachments", "Attachment")
    Post = apps.get_model("misago_threads", "Post")

    queryset = Post.objects.filter(
        Q(original__contains="/a/")
        | Q(original__contains=settings.MEDIA_URL + "attachments/")
    ).order_by("-id")

    for post in queryset.iterator(chunk_size=20):
        update_post_attachments_markup(Attachment, post)


RE_IMG_LINK = re.compile(
    r"\[!\[.+?\]\(/a/(?P<secret>[A-Za-z0-9]+)/(?P<id>[1-9][0-9]*)/(\?shva=1)?\)\]\(/a/[A-Za-z0-9]+/[1-9][0-9]*/(\?shva=1)?\)"
)
RE_IMG_LINK_WITH_THUMB = re.compile(
    r"\[!\[.+?\]\(/a/thumb/(?P<secret>[A-Za-z0-9]+)/(?P<id>[1-9][0-9]*)/(\?shva=1)?\)\]\(/a/[A-Za-z0-9]+/[1-9][0-9]*/(\?shva=1)?\)"
)
RE_IMG = re.compile(
    r"!\[.+?\]\(/a/(thumb/)?(?P<secret>[A-Za-z0-9]+)/(?P<id>[1-9][0-9]*)/(\?shva=1)?\)"
)
RE_ATTACHMENT_URL = re.compile(
    r"/a/(?P<thumbnail>thumb/)?(?P<secret>[A-Za-z0-9]+)/(?P<id>[1-9][0-9]*)/(\?shva=1)?"
)
RE_MEDIA_URL = re.compile(
    re.escape(settings.MEDIA_URL)
    + r"attachments/[A-Za-z0-9]{2}/[A-Za-z0-9]{2}/[A-Za-z0-9]+/.+(\.[A-Za-z]+)?\.([A-Za-z]+)"
)


def update_post_attachments_markup(attachment_type, post):
    update_img_with_thumb_markdown_syntax_partial = partial(
        update_img_with_thumb_markdown_syntax, attachment_type
    )
    update_attachment_url_partial = partial(update_attachment_url, attachment_type)
    update_media_url_partial = partial(update_media_url, attachment_type)

    original = RE_IMG_LINK_WITH_THUMB.sub(
        update_img_with_thumb_markdown_syntax_partial, post.original
    )
    original = RE_IMG_LINK.sub(update_img_with_thumb_markdown_syntax_partial, original)
    original = RE_IMG.sub(update_img_with_thumb_markdown_syntax_partial, original)
    original = RE_ATTACHMENT_URL.sub(update_attachment_url_partial, original)

    original = RE_MEDIA_URL.sub(update_media_url_partial, original)

    if original == post.original:
        return False

    post.original = original
    post.save(update_fields=["original"])

    return True


def update_img_with_thumb_markdown_syntax(attachment_type, matchobj):
    full_match = matchobj.group(0)

    try:
        id = int(matchobj.group("id"))
    except (TypeError, ValueError):
        return full_match

    secret = matchobj.group("secret")
    if not id or not secret:
        return full_match

    attachment = attachment_type.objects.filter(id=id, secret=secret).first()
    if not attachment:
        return full_match

    return f"<attachment={attachment.name}:{attachment.id}>"


def update_attachment_url(attachment_type, matchobj):
    full_match = matchobj.group(0)

    try:
        id = int(matchobj.group("id"))
    except (TypeError, ValueError):
        return full_match

    secret = matchobj.group("secret")
    if not id or not secret:
        return full_match

    attachment = attachment_type.objects.filter(id=id, secret=secret).first()
    if not attachment:
        return full_match

    if full_match.startswith("/a/thumb/") and attachment.thumbnail:
        return reverse(
            "misago:attachment-thumbnail",
            kwargs={"id": attachment.id, "slug": attachment.slug},
        )

    return reverse(
        "misago:attachment-download",
        kwargs={"id": attachment.id, "slug": attachment.slug},
    )


def update_media_url(attachment_type, matchobj):
    full_match = matchobj.group(0)
    file_path = full_match[len(settings.MEDIA_URL) :]

    attachment = attachment_type.objects.filter(
        Q(upload=file_path) | Q(thumbnail=file_path)
    ).first()

    if not attachment:
        return full_match

    if attachment.thumbnail and attachment.thumbnail.name == full_match:
        return reverse(
            "misago:attachment-thumbnail",
            kwargs={"id": attachment.id, "slug": attachment.slug},
        )

    return reverse(
        "misago:attachment-download",
        kwargs={"id": attachment.id, "slug": attachment.slug},
    )


class Migration(migrations.Migration):

    atomic = False

    dependencies = [
        ("misago_attachments", "0005_attachment_clean_names_populate_slugs"),
        ("misago_threads", "0017_delete_subscription"),
    ]

    operations = [
        # migrations.RunPython(
        #     update_posts_attachments_markup,
        #     migrations.RunPython.noop,
        # ),
    ]
