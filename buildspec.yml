version: 0.2
phases:
  install:
    runtime-versions:
      nodejs: 10
      python: 3.7

  pre_build:
    commands:
      - export LC_ALL="en_US.UTF-8"
      - locale-gen en_US en_US.UTF-8

  build:
    commands:
      - export CORE_CACHE="$(aws ssm get-parameter --name /$STAGE/global/core_cache --with-decryption --output text --query Parameter.Value)"

      - python3 -m venv venv
      - . venv/bin/activate
      - pip install -r webapp/requirements.txt --no-cache-dir

      - sed -i "s/'docutils\*',//g" 'venv/lib/python3.7/site-packages/zappa/core.py'

      # FE Build
      - cd frontend
      - npm install
      - npm install -g gulp
      - npx gulp build
      - rm -r node_modules # decrease size of upload package

      # Zappa
      - PYTHON_JINJA2="import os; import sys; import jinja2; sys.stdout.write(jinja2.Template(sys.stdin.read()).render(env=os.environ))"
      - cd ../webapp/src
      - python -c "${PYTHON_JINJA2}" < zappa_settings.json.j2 > zappa_settings.json
      - cat zappa_settings.json
      - python3 zappa_deploy.py $STAGE || true
      - zappa manage $STAGE migrate || true
      - zappa update $STAGE

      # Collectstatic times out for some reason but seems to work
      # Run twice to be safe, and escape to mark build as succeeded
      - zappa manage $STAGE "collectstatic --no-input" || true
      - zappa manage $STAGE "collectstatic --no-input" || true

      # API Gateway
      - aws apigateway get-domain-name --domain-name ${DOMAIN} 2>&1 || zappa certify $STAGE --yes
      - |-
        for name in ${SUBJECT_ALTERNATIVE_NAMES}; do
          DOMAIN=${name}
          python -c "${PYTHON_JINJA2}" < zappa_settings.json.j2 > zappa_settings.json
          echo Validating zappa certification for ${DOMAIN}
          result=$(aws apigateway get-domain-name --domain-name ${DOMAIN} 2>&1)
          exit_code=$?
          echo ${result}
          if [ ${exit_code} -ne 0 ]; then
            sleep 60
            zappa certify $STAGE --yes
          fi
        done
